function initializeParallax(e){var t=e.querySelectorAll("*[parallax]"),o=[],r=!1;"none"==getComputedStyle(document.body).transform&&(document.body.style.transform="translateZ(0)");var l=document.createElement("div");l.style.position="fixed",l.style.top="0",l.style.width="1px",l.style.height="1px",l.style.zIndex=1,document.body.insertBefore(l,document.body.firstChild);for(var i=0;i<t.length;i++){var n=t[i],s=n.parentNode;if("visible"==getComputedStyle(s).overflow){e&&s.parentNode!=e&&console.warn("Currently we only track a single overflow clip, but elements from multiple clips found.",n);var a;e=s.parentNode;"visible"==getComputedStyle(e).overflow&&console.error("Parent of sticky container should be scrollable element",n),r||getComputedStyle(e).webkitOverflowScrolling?(r=!0,a=s):(a=e,s.style.transformStyle="preserve-3d"),a.style.perspectiveOrigin="bottom right",a.style.perspective="1px",r&&(n.style.position="-webkit-sticky"),r&&(n.style.top="0"),n.style.transformOrigin="bottom right";for(var p=t[i].previousElementSibling;p&&p.hasAttribute("parallax");)p=p.previousElementSibling;for(var d=t[i].nextElementSibling;d&&!d.hasAttribute("parallax-cover");)d=d.nextElementSibling;o.push({node:t[i],top:t[i].offsetTop,sticky:!!r,nextCover:d,previousCover:p})}else console.error("Need non-scrollable container to apply perspective for",n)}e.addEventListener("scroll",function(){for(var t=0;t<o.length;t++){var r=o[t].node.parentNode,l=o[t].previousCover,i=o[t].nextCover,n=l?l.offsetTop+l.offsetHeight:0,s=i?i.offsetTop:r.offsetHeight;n-200-e.clientHeight<e.scrollTop&&e.scrollTop;"block"!=o[t].node.style.display&&(o[t].node.style.display="block")}}),window.addEventListener("resize",onResize.bind(null,o)),onResize(o);for(i=0;i<t.length;i++)t[i].parentNode.insertBefore(t[i],t[i].parentNode.firstChild);console.log("initialized!")}function onResize(e){for(var t=0;t<e.length;t++){var o=e[t].node.parentNode,r=o.parentNode,l=e[t].previousCover,i=e[t].nextCover,n=e[t].node.getAttribute("parallax"),s=l?l.offsetTop+l.offsetHeight:0,a=e[t].sticky?0:r.offsetWidth-r.clientWidth,p=(e[t].sticky,e[t].node.offsetHeight),d=0;if(n)d=1-1/n;else d=(p-(i?i.offsetTop:o.offsetHeight)+s)/(p-r.clientHeight);e[t].sticky&&(d=1/d);var f=1/(1-d),c=a*(f-1),v=e[t].sticky?-(o.scrollHeight-s-p)*(1-f):(s-d*(p-r.clientHeight))*f;e[t].node.style.transform="scale("+(1-d)+") translate3d("+c+"px, "+v+"px, "+d+"px)"}}